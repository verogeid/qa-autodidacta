Semana 9: Hooks personalizados

Esta semana aprenderás a crear hooks personalizados para reutilizar lógica.

Vamos a crear un hook para manejar el estado y la validación de un campo de formulario.

Escribe:

import { useState } from 'react'

function useCampoInicial(valorInicial) {
  const [valor, setValor] = useState(valorInicial)
  const [error, setError] = useState('')

  function onChange(e) {
    setValor(e.target.value)
    if (e.target.value.length < 3) {
      setError('Debe tener al menos 3 caracteres')
    } else {
      setError('')
    }
  }

  return { valor, onChange, error }
}

export default useCampoInicial

Explicación:

Este hook maneja el valor y la validación para un campo.

Si el texto es muy corto, muestra un error.

Resumen:

Los hooks personalizados simplifican tu código y promueven la reutilización.

Úsalos para separar lógica de UI y mejorar mantenibilidad.
